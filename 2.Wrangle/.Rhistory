dat1=2018
df.dates$col5=paste(df.dates$col4, dat1, sep = '')
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
iris %>%
select(Petal.Length, Species)
#Select basic
select(iris, Petal.Length, Species)
iris %>%
select(Petal.Length, Species)%>%
filter(!Petal.Length%in%c(1.4,1.5))
library(lubridate)
library(lubridate)
library(lubridate)
library(lubridate)
library(lubridate)
library(lubridate)
library(lubridate)
library(lubridate)
library(lubridate)
install.packages("lubridate")
install.packages("lubridate")
dat1
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
install.packages("readr")
install.packages("tidyverse")
install.packages("tidyr")
install.packages("dplyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("stringr")
install.packages("readr")
install.packages("tidyverse")
install.packages("tidyr")
install.packages("dplyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("dplyr")
install.packages("dplyr")
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species)
iris %>%
mutate(Species= ifelse(grepl("setosa",Species),"valor de prueba",Species))
install.packages("readr")
install.packages("tidyverse")
install.packages("tidyr")
install.packages("dplyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("dplyr")
install.packages("readr")
install.packages("tidyverse")
install.packages("tidyr")
install.packages("dplyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
select(iris, Petal.Length, Species)
select(iris, Petal.Length, Species):
select
select(iris, Petal.Length, Species):
#Select basic
select(iris, Petal.Length, Species):
#Select with pipe
iris %>%
select(Petal.Length, Species)
select(iris, Petal.Length, Species):
select
iris %>%
select(Petal.Length, Species)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
library(readxl)
library(lubridate)
library(lubridate)
library(lubridate)
vec.dates<-seq(as.Date("1910/1/1"), as.Date("1999/1/1"), "years")
vec.dates<-seq(as.Date("1910/1/1"), as.Date("1999/1/1"), "years")
vec.dates
df.dates<-data.frame(col1=vec.dates,col2="AAA")
df.dates
dat1=2018
dat1=2018
dat1
df.dates$col5=paste(df.dates$col4, dat1, sep = '')
df.dates
install.packages("readr")
install.packages("tidyverse")
install.packages("tidyr")
install.packages("dplyr")
install.packages("stringr")
install.packages("lubridate")
#library(tidyverse)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
library(readxl)
#working with dates
library(lubridate)
#library(tidyverse)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
library(readxl)
#working with dates
library(lubridate)
#1.Create a dataframe of dates
vec.dates<-seq(as.Date("1910/1/1"), as.Date("1999/1/1"), "years")
#2.Convert to dataframe
df.dates<-data.frame(col1=vec.dates,col2="AAA")
#5.Create a new colum replacing by position
dat1=2018
df.dates$col5=paste(df.dates$col4, dat1, sep = '')
vec.dates<-seq(as.Date("1910/1/1"), as.Date("1999/1/1"), "years")
vec.dates<-seq(as.Date("1910/1/1"), as.Date("1999/1/1"), "years")
vec.dates
df.dates<-data.frame(col1=vec.dates,col2="AAA")
df.dates
dat1=2018
dat1
df.dates$col5=paste(df.dates$col4, dat1, sep = '')
df.dates
select(iris, Petal.Length, Species)
iris %>%
select(Petal.Length, Species)
iris %>%
select(Petal.Length, Species)%>%
filter(!Petal.Length%in%c(1.4,1.5))
examSelec1<-iris %>%
select(Petal.Length, Species)%>%
filter(Petal.Length%in%c(1.4,1.5))%>%
arrange(desc(Petal.Length))
examSelec1<-iris %>%
select(Petal.Length, Species)%>%
filter(Petal.Length%in%c(1.4,1.5))%>%
arrange(desc(Petal.Length))
examSelec1
select
iris
examSelec1<-iris %>%
select(Petal.Length, Species)%>%
filter(Petal.Length%in%c(1.4,1.5))%>%
arrange(desc(Petal.Length))
examSelec1
df %>% filter(A == 1 & B == 3 | A == 3 & B ==2)
data1
data1 %>% filter(A == 1 & B == 3 | A == 3 & B ==2)
data1 %>% filter(A == 1 & B == 3 | A == 3 & B ==2)
if (!require("flexdashboard")) {
install.packages("flexdashboard", repos="http://cran.rstudio.com/")
library(flexdashboard)
}
if (!require("dplyr")) {
install.packages("dplyr", repos="http://cran.rstudio.com/")
library(dplyr)
}
if (!require("readxl")) {
install.packages("readxl", repos="http://cran.rstudio.com/")
library(readxl)
}
if (!require("tidyr")) {
install.packages("tidyr", repos="http://cran.rstudio.com/")
library(tidyr)
}
if (!require("stringr")) {
install.packages("stringr", repos="http://cran.rstudio.com/")
library(stringr)
}
if (!require("plotly")) {
install.packages("plotly", repos="http://cran.rstudio.com/")
library(plotly)
}
if (!require("ggplot2")) {
install.packages("ggplot2", repos="http://cran.rstudio.com/")
library(ggplot2)
}
if (!require("ggthemes")) {
install.packages("ggthemes", repos="http://cran.rstudio.com/")
library(ggthemes)
}
if (!require("formattable")) {
install.packages("formattable", repos="http://cran.rstudio.com/")
library(formattable)
}
if (!require("forecast")) {
install.packages("forecast", repos="http://cran.rstudio.com/")
library(forecast)
}
if (!require("stats")) {
install.packages("stats", repos="http://cran.rstudio.com/")
library(stats)
}
###2.Funcion BarChart
#### Columns expected in "df_fun"
##### x="periodo"
##### y="cantidad
##### fill="criterio"
funBarGen<- function(df_fun)
{
ggplot(df_fun, aes(x = periodo, y = cantidad, fill = criterio, label = cantidad)) +
geom_bar(stat = "identity") +
geom_text(size = 2.5, position = position_stack(vjust = 0.5))+
theme_calc()+
theme(legend.text = element_text(size = 8),
legend.title=element_text(face = "bold", size = 9),
axis.text.x = element_text(angle = -30, vjust = 1, hjust = 0,size = 7),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9)
)
}
funTheme<- function()
{
theme_calc()+
theme(legend.text = element_text(size = 8),
legend.title=element_text(face = "bold", size = 9),
axis.text.x = element_text(angle = -30, vjust = 1, hjust = 0,size = 7),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9)
)
}
#'1.Function "Linea de frecuencia"
#'param
#' df_int: Columns expected in "df_int"
##### "periodo"
##### "criterio"
funLineGen<- function(df_int)
{
ggplot(df_int, aes(x = periodo,colour = criterio),environment = environment())+
geom_freqpoly(aes(group = criterio), stat = "count")+
theme_calc()+
theme(legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.x = element_text(angle = -30, vjust = 1, hjust = 0,size = 9),
axis.text.y = element_text(size = 9),
axis.title.x = element_text(size = 11,vjust = 1),
axis.title.y = element_text(size = 11)
)
}
df.usuario<-read_excel("C:/R-Source/2020/jira/Usuarios_JIRA.xlsx", sheet = 'Sheet1')
names(df.usuario) <- c("nombres", "mail", "datos_ingreso")
df.usuario<-read_excel("C:/R-Source/2020/jira/Usuarios_JIRA.xlsx", sheet = 'Sheet1')
names(df.usuario) <- c("nombres", "mail", "datos_ingreso")
View(df.usuario)
if (!require("flexdashboard")) {
install.packages("flexdashboard", repos="http://cran.rstudio.com/")
library(flexdashboard)
}
if (!require("dplyr")) {
install.packages("dplyr", repos="http://cran.rstudio.com/")
library(dplyr)
}
if (!require("readxl")) {
install.packages("readxl", repos="http://cran.rstudio.com/")
library(readxl)
}
if (!require("tidyr")) {
install.packages("tidyr", repos="http://cran.rstudio.com/")
library(tidyr)
}
if (!require("stringr")) {
install.packages("stringr", repos="http://cran.rstudio.com/")
library(stringr)
}
if (!require("plotly")) {
install.packages("plotly", repos="http://cran.rstudio.com/")
library(plotly)
}
if (!require("ggplot2")) {
install.packages("ggplot2", repos="http://cran.rstudio.com/")
library(ggplot2)
}
if (!require("ggthemes")) {
install.packages("ggthemes", repos="http://cran.rstudio.com/")
library(ggthemes)
}
if (!require("formattable")) {
install.packages("formattable", repos="http://cran.rstudio.com/")
library(formattable)
}
if (!require("forecast")) {
install.packages("forecast", repos="http://cran.rstudio.com/")
library(forecast)
}
if (!require("stats")) {
install.packages("stats", repos="http://cran.rstudio.com/")
library(stats)
}
###2.Funcion BarChart
#### Columns expected in "df_fun"
##### x="periodo"
##### y="cantidad
##### fill="criterio"
funBarGen<- function(df_fun)
{
ggplot(df_fun, aes(x = periodo, y = cantidad, fill = criterio, label = cantidad)) +
geom_bar(stat = "identity") +
geom_text(size = 2.5, position = position_stack(vjust = 0.5))+
theme_calc()+
theme(legend.text = element_text(size = 8),
legend.title=element_text(face = "bold", size = 9),
axis.text.x = element_text(angle = -30, vjust = 1, hjust = 0,size = 7),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9)
)
}
funTheme<- function()
{
theme_calc()+
theme(legend.text = element_text(size = 8),
legend.title=element_text(face = "bold", size = 9),
axis.text.x = element_text(angle = -30, vjust = 1, hjust = 0,size = 7),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9)
)
}
#'1.Function "Linea de frecuencia"
#'param
#' df_int: Columns expected in "df_int"
##### "periodo"
##### "criterio"
funLineGen<- function(df_int)
{
ggplot(df_int, aes(x = periodo,colour = criterio),environment = environment())+
geom_freqpoly(aes(group = criterio), stat = "count")+
theme_calc()+
theme(legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.x = element_text(angle = -30, vjust = 1, hjust = 0,size = 9),
axis.text.y = element_text(size = 9),
axis.title.x = element_text(size = 11,vjust = 1),
axis.title.y = element_text(size = 11)
)
}
df.usuario<-read_excel("C:/R-Source/2020/jira/Usuarios_JIRA.xlsx", sheet = 'Sheet1')
names(df.usuario)[1]<-"Nombre"
names(df.usuario)[2]<-"mail"
names(df.usuario)[3]<-"datos_ingreso"
str_extract(df.usuario$datos_ingreso, "[0-9]{4}-[0-9]{2}-[0-9]{2}")
View(df.usuario)
str_extract(df.usuario$datos_ingreso, "[0-9]{2}/[0-9]{2}/[0-9]{2}")
df.usuario$ultimo_ingreso= str_extract(df.usuario$datos_ingreso, "[0-9]{2}/[0-9]{2}/[0-9]{2}")
df.usuario$ultimo_ingreso=as.Date(df.usuario$ultimo_ingreso)
View(df.usuario)
df.usuario<-read_excel("C:/R-Source/2020/jira/Usuarios_JIRA.xlsx", sheet = 'Sheet1')
names(df.usuario)[1]<-"Nombre"
names(df.usuario)[2]<-"mail"
names(df.usuario)[3]<-"datos_ingreso"
#Extract dates with this pattern "18/09/20"
df.usuario$ultimo_ingreso= str_extract(df.usuario$datos_ingreso, "[0-9]{2}/[0-9]{2}/[0-9]{2}")
df <- data.frame(
id = 1:4,
name = c("Bob", "Ashley", "James", "David"),
age = c(48, NA, 40, 28),
test1_score = c(18.9, 19.5, NA, 12.9),
stringsAsFactors = FALSE)
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
test1_score = color_bar("pink", 'proportion', 0.2)
))
df[is.na(df)]=''
formattable(df, list(
age = color_tile("white", "orange"),
test1_score = color_bar("pink", 'proportion', 0.2)
))
df <- data.frame(
id = 1:10,
name = c("Bob", "Ashley", "James", "David", "Jenny",
"Hans", "Leo", "John", "Emily", "Lee"),
age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
stringsAsFactors = FALSE)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
dt <- mtcars[1:5, 1:6]
kable(dt)
if (!require("dplyr")) {
install.packages("dplyr", repos="http://cran.rstudio.com/")
library(dplyr)
}
if (!require("kableExtra")) {
install.packages("kableExtra", repos="http://cran.rstudio.com/")
library(kableExtra)
}
if (!require("knitr")) {
install.packages("knitr", repos="http://cran.rstudio.com/")
library(knitr)
}
dt <- mtcars[1:5, 1:6]
kable(dt)
kable(dt) %>%
kable_styling(latex_options = "striped")
long_dt <- rbind(mtcars, mtcars)
kable(long_dt, longtable = T, booktabs = T, caption = "Longtable") %>%
add_header_above(c(" ", "Group 1" = 5, "Group 2" = 6)) %>%
kable_styling(latex_options = c("repeat_header"))
### create a data frame of totals
product_sales <- data.frame("Day" = c(1:10),"Sales" = c(100,200,150,120,130,145,90,150,180,190))
### add cumulative column to the data frame
product_sales[,"cum_sales"] <- cumsum(product_sales$Sales)
### print data frame
product_sales
if (!require("gcookbook")) {
install.packages("gcookbook", repos="http://cran.rstudio.com/")
library(gcookbook)
}
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_col(colour = "black", position = "fill") +
scale_y_continuous(labels = scales::percent)
if (!require("gcookbook")) {
install.packages("gcookbook", repos="http://cran.rstudio.com/")
library(gcookbook)
}
if (!require("gcookbook")) {
install.packages("gcookbook", repos="http://cran.rstudio.com/")
library(gcookbook)
}
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_col(colour = "black", position = "fill") +
scale_y_continuous(labels = scales::percent)
library(ggplot2)
if (!require("gcookbook")) {
install.packages("gcookbook", repos="http://cran.rstudio.com/")
library(gcookbook)
}
library(ggplot2)
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_col(colour = "black", position = "fill") +
scale_y_continuous(labels = scales::percent)
if (!require("gcookbook")) {
install.packages("gcookbook", repos="http://cran.rstudio.com/")
library(gcookbook)
}
library(ggplot2)
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(stat = "identity",colour = "black", position = "fill") +
geom_text(data = res, aes(label=scales::percent(ratio), y=ratio), position = position_fill(vjust = 0.5))
library(dplyr)
library(plyr)
if (!require("gcookbook")) {
install.packages("gcookbook", repos="http://cran.rstudio.com/")
library(gcookbook)
}
library(ggplot2)
library(dplyr)
library(plyr)
#Add a column that catch the "ratio"
res= ddply(cabbage_exp, "Date", mutate, ratio=Weight/sum(Weight))
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(stat = "identity",colour = "black", position = "fill") +
geom_text(data = res, aes(label=scales::percent(ratio), y=ratio), position = position_fill(vjust = 0.5))
View(cabbage_exp)
View(cabbage_exp)
res= ddply(cabbage_exp, "Date", mutate, ratio=Weight/sum(Weight))
res
View(res)
ce <- cabbage_exp %>%
group_by(Date) %>%
mutate(ratio=Weight/sum(Weight))
ce
View(cabbage_exp)
remove.packages("plyr", lib="~/R/win-library/4.0")
ce <- cabbage_exp %>%
group_by(Date) %>%
mutate(ratio1=Weight/sum(Weight))
ce
library(gcookbook)
library(dplyr)
ce1 <- cabbage_exp %>%
group_by(Date) %>%
mutate(percent_weight = Weight / sum(Weight) * 100)
ce1
